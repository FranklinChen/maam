
x,y,k ∈ Var  ::= ..variables..
b,i,l ∈ Lit  ::= ℤ ⋃ 𝔹
a     ∈ Atom ::= x | l | op a | λ x . c | λ x k . c
op    ∈ Op   ::= add1 | sub1 | gez
c     ∈ Call ::= if(a){c}{c} | a(a) | a(a,a) | halt(a)

v  ∈ ^Val^ ::= INT | l | <λ x . c , ρ> | <λ x k . c , ρ>

α  ∈ ^Addr^  ⊆ Set
τ  ∈ ^Timn^  ⊆ Set
ρ  ∈ ^Env^   ⊆ Var ⇀  𝒫 (^Addr^)
σ  ∈ ^Store^ ⊆ ^Addr^ ⇀  𝒫 (^Val^)

𝒜 [_,_](_) ⊆ (^Env^ × ^Store^ × Atom) ⇀  𝒫 (^Val^)
𝒜 [ρ,σ](x)                      := ⋃ [ σ(α) | α ∈ ρ(x) ]
𝒜 [ρ,σ](l)                      := { l }
𝒜 [ρ,σ](add1 a) | 𝒜 [ρ,σ] ⊑ INT := { INT }
𝒜 [ρ,σ](sub1 a) | 𝒜 [ρ,σ] ⊑ INT := { INT }
𝒜 [ρ,σ](gez a)  | 𝒜 [ρ,σ] ⊑ INT := { T , F }
𝒜 [ρ,σ](λ x . c)                := { <λ x . c , ρ> }
𝒜 [ρ,σ](λ x k . c)              := { <λ x k . c , ρ> }

𝒞 <_,_,_> ⊆ (Call × ^Env^ × ^Store^ × ^Time^) ⇀  𝒫 (Call × ^Env^ × ^Store^ × ^Time^)
𝒞 <if(a){c₁}{c₂},ρ,σ,τ> := { <c,ρ,σ,τ'>    
                           |  c  ∈ ⋃ [ { c1 } if T ∈ 𝒜 [ρ,σ](a), { c2 } if F ∈ 𝒜 [ρ,σ](a) ] 
                           | τ' := tick(if(a){c1}{c2},τ)
                           }
𝒞 <a₁(a₂,a₃),ρ,σ>       := { <c,ρ'',σ',τ'> 
                           | <λ x k . c , ρ'>  ∈ 𝒜 [ρ,σ](a₁)
                           |               v₂  ∈ 𝒜 [ρ,σ](a₂)
                           |               v₃  ∈ 𝒜 [ρ,σ](a₃)
                           |               τ' := tick(a₁(a₂,a₃),τ)
                           |               αₓ := alloc(x,τ')
                           |               αₖ := alloc(k,τ')
                           |              ρ'' := ρ'[x ↦ αₓ][k ↦ αₖ]
                           |               σ' := σ ⊔ [αₓ ↦ v₂] ⊔ [αₖ ↦ v₃]
                           }
