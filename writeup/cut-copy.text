
There are two key properties to be discussed of any instantiation of the above framework.
First, \emph{soundness} is the property

both a discipline for constructing program analyses
and a framework for reasoning about their correctness pioneered by Cousot and
Cousot. Van Horn and Might have extended this tradition in their work on
Abstracting Abstract Machines, showing how to systematically construct analysis
for small step operational semantics.
%
Relating an analysis to a semantics requires a bridge.  In general, such a
relationship will be stated as:
%
‚àÄ (c c': C) (a a': A), c R a ‚àß c ‚Ü¶ c' ‚àß a ‚Ü¶ a' ‚áí  c' R a'
%
In words, this is saying that for a concrete program c and a valid abstraction
of it a, if the program can take a step to c' and the abstraction can take a
step to a', then a' is a valid abstraction of c'.
%
Once this theorem is established, the transitive closure of it follows
trivially and justifies performing an analysis by:
%
1: abstracting a program c to it its abstraction a
2: running a using the transitive closure of a ‚Ü¶* a'
3: inspecting the final a' to infer behavior of running c
%
The question now is how to set up R--how to relate one language and semantics
to another. For this, abstract interpretation turns to order theory.  We say c
and a are related if c is in the image of projecting a to ùí´(c).  Using this
projection, commonly called Œ≥, we restate the theorem:
%
‚àÄ (c c': C) (a a': A), c ‚àà Œ≥(a) ‚àß c ‚Ü¶ c' ‚àß a ‚Ü¶ a' ‚áí  c' ‚àà Œ≥(a')
%
However, the technique generalizes to arbitrary partial orders, and is done so
profitably in the literature.  Stating the theorem with partial orders gives:
%
‚àÄ (c c': C) (a a': A), c ‚äë Œ≥(a) ‚àß c ‚Ü¶ c' ‚àß a ‚Ü¶ a' ‚áí  c' ‚äë Œ≥(a')
%
The partial order for concrete domains is almost always the inclusion order on
ùí´(C), while the partial order for abstract domains is almost always a finite
element lattice.
%
-------------------

A complete treatment of abstract interpretation is centered around constructing
a _galois connection_ between a concrete and abstract semantics. Establishing a
galois connection between C and A establishes both sides of the relationship
between C and A, whereas until now we've only had one direction.
Having both direction allows us to directly project concrete objects to
abstract objects, and provides a setting to discuss if Œ≥ is a "best"
abstraction function relating A to C.
%
Œ± and Œ≥ must have the expansive and contractive properties in order
for this to be considered a galois connection.  The expansive property
corresponds to the soundness of the abstraction.  Soundness ensures that if
you abstract and then project back to the concrete, you must cover the points
you started with.  The contractive property corresponds to the tightness of
the abstraction.  Tightness ensures that the abstraction is the most precise
abstraction possible.  For example, picking [Œ±(zs) = {EVEN, ODD}] would be
sound, because projecting back to the concrete gives ‚Ñ§ which tautologically
covers all integers, but this choice of Œ± is clearly not tight.  Our choice
of Œ± and Œ≥ in this example are indeed both sound and tight.
%
In this example, the concrete language is (‚Ñ§,+,*) and the abstract language is
({EVEN,ODD},‚àß,‚à®)
%
Using the lifting of galois connections to the function space, we can/should
also justify _+_ ‚äë Œ≥(_‚àß_) and _*_ ‚äë Œ≥(_‚à®_)
%
